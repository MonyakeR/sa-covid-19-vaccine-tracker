box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderValueBox({
valueBox(
paste0(25 + input$count, "%"), "Progress", icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderValueBox({
valueBox(
"80%", "Approval", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
}
shinyApp(ui, server)
div(class = "my-class", "Div content")
library(shiny)
div(class = "my-class", "Div content")
runApp()
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_data
# load libraries
library(readr)
library(dplyr)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_data
View(sa_data)
sa_data
sa_data
max(sa_data$date)
sa_data %>%
dplyr::filter(date == max(date))
sa_data %>%
dplyr::filter(date == max(date)) %>%
pop()
sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::pull()
names(sa_data)
dplyr::pull()
fully_vaccinated <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(people_fully_vaccinated) %>%
dplyr::pull()
fully_vaccinated / 59.62*1000000
fully_vaccinated / (59.62*1000000)
sa_total_pop <- 59.62 * 1000000
sa_adult_pop <- 39798201
sa_total_pop
sa_adult_pop
fully_vaccinated/sa_total_pop
fully_vaccinated/sa_adult_pop
fully_vaccinated
names(sa_data)
doses_administered <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(total_vaccinations) %>%
dplyr::pull()
doses_administered
runApp()
runApp()
runApp()
if (interactive()) {
library( shiny )
library( shinyWidgets )
ui <- fluidPage(
tags$h3("Format numbers"),
tags$br(),
noUiSliderInput(
inputId = "form1",
min = 0, max = 10000,
value = 800,
format = wNumbFormat(decimals = 3,
thousand = ".",
suffix = " (US $)")
),
verbatimTextOutput(outputId = "res1"),
tags$br(),
noUiSliderInput(
inputId = "form2",
min = 1988, max = 2018,
value = 1988,
format = wNumbFormat(decimals = 0,
thousand = "",
prefix = "Year: ")
),
verbatimTextOutput(outputId = "res2"),
tags$br()
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$form1)
output$res2 <- renderPrint(input$form2)
}
shinyApp(ui, server)
}
install.packages("shinyWidgets")
if (interactive()) {
library( shiny )
library( shinyWidgets )
ui <- fluidPage(
tags$h3("Format numbers"),
tags$br(),
noUiSliderInput(
inputId = "form1",
min = 0, max = 10000,
value = 800,
format = wNumbFormat(decimals = 3,
thousand = ".",
suffix = " (US $)")
),
verbatimTextOutput(outputId = "res1"),
tags$br(),
noUiSliderInput(
inputId = "form2",
min = 1988, max = 2018,
value = 1988,
format = wNumbFormat(decimals = 0,
thousand = "",
prefix = "Year: ")
),
verbatimTextOutput(outputId = "res2"),
tags$br()
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$form1)
output$res2 <- renderPrint(input$form2)
}
shinyApp(ui, server)
}
runApp()
shiny::runApp()
# load libraries
library(readr)
library(dplyr)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_total_pop <- 59.62 * 1000000
sa_adult_pop <- 39798201
# calculate data for the score cards
fully_vaccinated <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(people_fully_vaccinated) %>%
dplyr::pull()
doses_administered <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(total_vaccinations) %>%
dplyr::pull()
at_least_one_dose <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(people_vaccinated) %>%
dplyr::pull()
# get daily vaccination numbers
sa_data <- sa_data %>%
mutate(daily_vaccine_doses = c(total_vaccinations[1], diff(total_vaccinations)))
# create plot for daily doses
bar_plot <- ggplot(sa_data, aes(date, daily_vaccine_doses)) +
geom_col()
ggplotly(bar_plot)
# plotly
plot_ly(sa_data, x = ~date, y = ~daily_vaccine_doses) %>%
add_bars()
names(sa_data)
runApp()
sa_data
runApp()
names(sa_data)
runApp()
shiny::runApp()
shiny::runApp()
Sys.Date()
# load libraries
library(readr)
library(dplyr)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_total_pop <- 59.62 * 1000000
sa_adult_pop <- 39798201
sa_data
Sys.Date()
Sys.Date() - 30
Sys.Date() - 60
sa_data %>% filter(date >= Sys.Date())
sa_data %>% filter(date >= Sys.Date() - 30)
sa_data
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
# load libraries
library(shiny)
library(shinydashboard)
library(readr)
library(dplyr)
library(plotly)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
names(sa_data)
View(sa_data)
runApp()
View(sa_data)
runApp()
library(googlesheets4)
read_sheet("https://docs.google.com/spreadsheets/d/1FTR9CVcjKB2147dD9fD1JDxNIyDFJXUxmWiU7FHToKk/edit?usp=sharing")
read_sheet("https://docs.google.com/spreadsheets/d/e/2PACX-1vTpXRXO5wpKifBgB-OjRO9YLninQte0NMI23qNBYwjR5vBB9yVyXAiZM_m7liamryGXkc0lWYHN7Xlz/pub?output=csv")
library(readr)
read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vTpXRXO5wpKifBgB-OjRO9YLninQte0NMI23qNBYwjR5vBB9yVyXAiZM_m7liamryGXkc0lWYHN7Xlz/pub?output=csv")
# metrics data url
metrics_url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTpXRXO5wpKifBgB-OjRO9YLninQte0NMI23qNBYwjR5vBB9yVyXAiZM_m7liamryGXkc0lWYHN7Xlz/pubhtml?gid=0&single=true"
score_cards <- read_csv(metrics_url)
score_cards
score_cards <- read_csv(metrics_url)
# metrics data url
metrics_url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTpXRXO5wpKifBgB-OjRO9YLninQte0NMI23qNBYwjR5vBB9yVyXAiZM_m7liamryGXkc0lWYHN7Xlz/pub?output=csv"
score_cards <- read_csv(metrics_url)
score_cards
# score cards data stored in google sheets
score_cards <- read_csv(metrics_url)
score_cards
runApp()
library(shiny)
library(shinydashboard)
ui <- dashboardPage(dashboardHeader(title = "demo",
tags$li(class = "dropdown",
tags$p("foo")
)
), dashboardSidebar(), dashboardBody())
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(
title = "demo"
),
dashboardSidebar(),
dashboardBody(
tags$head(tags$style(HTML(
'.myClass {
font-size: 20px;
line-height: 50px;
text-align: left;
font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
padding: 0 15px;
overflow: hidden;
color: white;
}
'))),
tags$script(HTML('
$(document).ready(function() {
$("header").find("nav").append(\'<span class="myClass"> Text Here </span>\');
})
'))
)
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shiny)
# Make a palette of 40 colors
colors <- rainbow(40, alpha = NULL)
# Mirror the rainbow, so we cycle back and forth smoothly
colors <- c(colors, rev(colors[c(-1, -40)]))
ui <- fluidPage(
tags$head(
# Listen for background-color messages
tags$script("
Shiny.addCustomMessageHandler('background-color', function(color) {
document.body.style.backgroundColor = color;
document.body.innerText = color;
});
"),
# A little CSS never hurt anyone
tags$style("body { font-size: 40pt; text-align: center; }")
)
)
server <- function(input, output, session) {
pos <- 0L
# Returns a hex color string, e.g. "#FF0073"
nextColor <- function() {
# Choose the next color, wrapping around to the start if necessary
pos <<- (pos %% length(colors)) + 1L
colors[[pos]]
}
observe({
# Send the next color to the browser
session$sendCustomMessage("background-color", nextColor())
# Update the color every 100 milliseconds
invalidateLater(100)
})
}
shinyApp(ui, server)
shiny::runApp()
# load libraries
library(shiny)
library(shinydashboard)
library(readr)
library(dplyr)
library(lubridate)
library(plotly)
library(shinyjs)
library(reactable)
library(htmltools)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
# metrics data url
metrics_url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTpXRXO5wpKifBgB-OjRO9YLninQte0NMI23qNBYwjR5vBB9yVyXAiZM_m7liamryGXkc0lWYHN7Xlz/pub?output=csv"
# provinces data url
provinces_url <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vT3i-s3GITMfP1GSnU4xEax6fvKeI88Qgfu2PNgHopMrqcPEbTAJftCmrX5en11VjgAvPY4WtY-elfl/pub?output=csv"
# get the last updated date
metrics_df <- read_csv(metrics_url)
metrics
metrics_df
metrics_df$date
last_updated <- mdy(max(metrics_df$date))
last_updated_day <- day(last_updated)
# get the last updated date
metrics_df <- read_csv(metrics_url)
last_updated <- mdy(max(as.Date(metrics_df$date, "%m/%d/%Y")))
metrics_df$date
as.Date("1/10/2022", "%m/%d/%Y")
# get the last updated date
metrics_df <- read_csv(metrics_url)
metrics_df$date <- as.Date(metrics_df$date, "%m/%d/%Y")
last_updated <- mdy(max(metrics_df$date))
metrics_df$date <- as.Date(metrics_df$date, "%m/%d/%Y")
last_updated <- mdy(max(metrics_df$date))
last_updated <- max(metrics_df$date)
last_updated_day <- day(last_updated)
last_updated_month <- month(last_updated, label = TRUE)
last_updated_year <- year(last_updated)
ui <- dashboardPage(
dashboardHeader(
title = "SA Covid-19 Vaccine tracker",
titleWidth = 300
),
dashboardSidebar(
width = 300,
sidebarMenu(
menuItem(
"Overview",
tabName = "overview",
icon = icon("dashboard")
),
menuItem(
"Info",
tabName = "info",
icon = icon("info-circle")
)
)
),
dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "style.css"),
tags$script(HTML('
$(document).ready(function() {
$("header").find("nav").append(\'<span id = "pageHeader" class="last-updated"></span>\');
})
')),
useShinyjs()
),
tabItems(
tabItem(
tabName = "overview",
fluidRow(
valueBoxOutput("fully_vaccinated"),
valueBoxOutput("at_least_one"),
valueBoxOutput("doses_administered")
),
fluidRow(
box(
width = 6,
title = "Daily vaccine doses administered",
#status = "primary",
selectInput(
"daily_timeframe",
label = "",
choices = c(
"All time" = as.Date("2021-02-16"),
"Last 60 days" = Sys.Date() - 60,
"Last 30 days" = Sys.Date() - 30
),
selected = "All time"
),
plotlyOutput("daily_doses")
),
box(
width = 6,
title = "Cumulative vaccinations",
#status = "primary",
selectInput(
"cumulative_timeframe",
label = "",
choices = c(
"All time" = as.Date("2021-02-16"),
"Last 60 days" = Sys.Date() - 60,
"Last 30 days" = Sys.Date() - 30
),
selected = "All time"
),
plotlyOutput("cumulative_vaccinations")
)
),
fluidRow(
box(
width = 12,
title = NULL,
reactableOutput("table")
)
)
),
tabItem(
tabName = "info",
box(
width = 12,
title = "Disclaimer, definitions and data sources",
HTML(
"<p>The vaccination dashboard shows the vaccination rates as reported by the health department.
Every day the health department posts the latest information from its <a href = 'https://sacoronavirus.co.za/latest-vaccine-statistics'>vaccine statistics dashboard</a> on its SA Coronavirus website.
At present, the numbers shown on the dashboard are a snapshot as at 17:00 on a particular day.
Data in the two graphs, Daily vaccine doses administered and Cumulative vaccinations comes from
<a href = 'https://github.com/owid/covid-19-data/blob/master/public/data/vaccinations/country_data/South%20Africa.csv'>Our World in Data.</a></p>"
),
HTML(
"
<p>People 18 years and older are the target population of the vaccination roll-out.
The estimated number of people in this age group used in the table was obtained from Statistics South Africa.
South Africa is currently using two vaccines, the one-dose Johnson & Johnson (J&J) shot and the two-dose Pfizer.
People who receive a J&J shot are fully vaccinated, but people need to receive two doses of Pfizer to be fully vaccinated.
The health department vaccination dashboard has a disclaimer that states:
“Data displayed in this dashboard only contains vaccination records captured on the live Electronic Vaccination Data System (EVDS) and excludes vaccination records captured on paper within the last 24 hours.
Totals will be adjusted as back-capturing and data validation are done.”
</p>"
),
h4("Definitions"),
HTML(
"
<dl>
<dt>Adults</dt>
<dd>- People 18 years and older. <b>Source</b>: Statssa Mid-Year population estimates 2020
</dd>
<dt>Individuals Vaccinated</dt>
<dd>- One dose J&J (single dose regimen) or Pfizer (two dose regimen) first dose administered
</dd>
<dt>Fully Vaccinated</dt>
<dd>- Total Number of Individuals that have received a Johnson & Johnson Vaccine or Pfizer 1st dose & 2nd dose.
</dd>
</dl>
"
)
)
)
)
runApp()
runApp()
shiny::runApp()
