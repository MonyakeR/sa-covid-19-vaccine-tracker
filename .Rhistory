# load libraries
library(readr)
library(dplyr)
# ourworldindata github source
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_data
sa_data
sa_data
tail(sa_data)
View(sa_data)
View(sa_data)
# load libraries
library(shiny)
library(shinydashboard)
library(dplyr)
library(plotly)
ggplot(sa_data, aes(date, people_vaccinated)) + geom_col()
ggplot(sa_data, aes(date, people_vaccinated)) + geom_line()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Info boxes"),
dashboardSidebar(),
dashboardBody(
# infoBoxes with fill=FALSE
fluidRow(
# A static infoBox
infoBox("New Orders", 10 * 2, icon = icon("credit-card")),
# Dynamic infoBoxes
infoBoxOutput("progressBox"),
infoBoxOutput("approvalBox")
),
# infoBoxes with fill=TRUE
fluidRow(
infoBox("New Orders", 10 * 2, icon = icon("credit-card"), fill = TRUE),
infoBoxOutput("progressBox2"),
infoBoxOutput("approvalBox2")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
# Same as above, but with fill=TRUE
output$progressBox2 <- renderInfoBox({
infoBox(
"Progress", paste0(25 + input$count, "%"), icon = icon("list"),
color = "purple", fill = TRUE
)
})
output$approvalBox2 <- renderInfoBox({
infoBox(
"Approval", "80%", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow", fill = TRUE
)
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(title = "Value boxes"),
dashboardSidebar(),
dashboardBody(
fluidRow(
# A static valueBox
valueBox(10 * 2, "New Orders", icon = icon("credit-card")),
# Dynamic valueBoxes
valueBoxOutput("progressBox"),
valueBoxOutput("approvalBox")
),
fluidRow(
# Clicking this will increment the progress amount
box(width = 4, actionButton("count", "Increment progress"))
)
)
)
server <- function(input, output) {
output$progressBox <- renderValueBox({
valueBox(
paste0(25 + input$count, "%"), "Progress", icon = icon("list"),
color = "purple"
)
})
output$approvalBox <- renderValueBox({
valueBox(
"80%", "Approval", icon = icon("thumbs-up", lib = "glyphicon"),
color = "yellow"
)
})
}
shinyApp(ui, server)
div(class = "my-class", "Div content")
library(shiny)
div(class = "my-class", "Div content")
runApp()
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_data
# load libraries
library(readr)
library(dplyr)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_data
View(sa_data)
sa_data
sa_data
max(sa_data$date)
sa_data %>%
dplyr::filter(date == max(date))
sa_data %>%
dplyr::filter(date == max(date)) %>%
pop()
sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::pull()
names(sa_data)
dplyr::pull()
fully_vaccinated <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(people_fully_vaccinated) %>%
dplyr::pull()
fully_vaccinated / 59.62*1000000
fully_vaccinated / (59.62*1000000)
sa_total_pop <- 59.62 * 1000000
sa_adult_pop <- 39798201
sa_total_pop
sa_adult_pop
fully_vaccinated/sa_total_pop
fully_vaccinated/sa_adult_pop
fully_vaccinated
names(sa_data)
doses_administered <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(total_vaccinations) %>%
dplyr::pull()
doses_administered
runApp()
runApp()
runApp()
if (interactive()) {
library( shiny )
library( shinyWidgets )
ui <- fluidPage(
tags$h3("Format numbers"),
tags$br(),
noUiSliderInput(
inputId = "form1",
min = 0, max = 10000,
value = 800,
format = wNumbFormat(decimals = 3,
thousand = ".",
suffix = " (US $)")
),
verbatimTextOutput(outputId = "res1"),
tags$br(),
noUiSliderInput(
inputId = "form2",
min = 1988, max = 2018,
value = 1988,
format = wNumbFormat(decimals = 0,
thousand = "",
prefix = "Year: ")
),
verbatimTextOutput(outputId = "res2"),
tags$br()
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$form1)
output$res2 <- renderPrint(input$form2)
}
shinyApp(ui, server)
}
install.packages("shinyWidgets")
if (interactive()) {
library( shiny )
library( shinyWidgets )
ui <- fluidPage(
tags$h3("Format numbers"),
tags$br(),
noUiSliderInput(
inputId = "form1",
min = 0, max = 10000,
value = 800,
format = wNumbFormat(decimals = 3,
thousand = ".",
suffix = " (US $)")
),
verbatimTextOutput(outputId = "res1"),
tags$br(),
noUiSliderInput(
inputId = "form2",
min = 1988, max = 2018,
value = 1988,
format = wNumbFormat(decimals = 0,
thousand = "",
prefix = "Year: ")
),
verbatimTextOutput(outputId = "res2"),
tags$br()
)
server <- function(input, output, session) {
output$res1 <- renderPrint(input$form1)
output$res2 <- renderPrint(input$form2)
}
shinyApp(ui, server)
}
runApp()
shiny::runApp()
# load libraries
library(readr)
library(dplyr)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_total_pop <- 59.62 * 1000000
sa_adult_pop <- 39798201
# calculate data for the score cards
fully_vaccinated <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(people_fully_vaccinated) %>%
dplyr::pull()
doses_administered <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(total_vaccinations) %>%
dplyr::pull()
at_least_one_dose <- sa_data %>%
dplyr::filter(date == max(date)) %>%
dplyr::select(people_vaccinated) %>%
dplyr::pull()
# get daily vaccination numbers
sa_data <- sa_data %>%
mutate(daily_vaccine_doses = c(total_vaccinations[1], diff(total_vaccinations)))
# create plot for daily doses
bar_plot <- ggplot(sa_data, aes(date, daily_vaccine_doses)) +
geom_col()
ggplotly(bar_plot)
# plotly
plot_ly(sa_data, x = ~date, y = ~daily_vaccine_doses) %>%
add_bars()
names(sa_data)
runApp()
sa_data
runApp()
names(sa_data)
runApp()
shiny::runApp()
shiny::runApp()
Sys.Date()
# load libraries
library(readr)
library(dplyr)
# our world in data github source for south africa
owid_url <- "https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/country_data/South%20Africa.csv"
sa_data <- read_csv(owid_url)
sa_total_pop <- 59.62 * 1000000
sa_adult_pop <- 39798201
sa_data
Sys.Date()
Sys.Date() - 30
Sys.Date() - 60
sa_data %>% filter(date >= Sys.Date())
sa_data %>% filter(date >= Sys.Date() - 30)
sa_data
runApp()
runApp()
runApp()
shiny::runApp()
